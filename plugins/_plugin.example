/*
 * Available to plugin environments:
 * 
 * listen(OBJECT options)
 *	options: See Below
 * 
 * irc
 *	.say(STRING context, STRING message)
 *	.action(STRING context, STRING message)
 *	.quit()
 *	.join(STRING channel, STRING key)
 *	.part(STRING channel)
 *	.help(STRING channel)
 *	.reload()
 *	.ignore(STRING user) <-- Global ignore
 *	.unignore(STRING user)
 *	.ignoreList()
 *	.raw(STRING msg) <-- WARNING: Should be limited to admins only
 * 
 * web
 *	.get(STRING uri, FUNC callback) <-- callback takes (error, response, body)
 *	.post(STRING uri, OBJECT toPost, FUNC callback)
 *
 * lib
 *	.supplant(STRING target, OBJECT SupplantObject)
 *	.mix(OBJECT from, OBJECT to, BOOL overwrite)
 *
 * regexFactory
 *	.actionMatching(STRING user)
 *	.only(ARRAY keywords, BOOL prefixed)
 *	.startsWith(<STRING|ARRAY> keywords, BOOL prefixed)
 *
 * DB
 *	.List(options) ~ CONSTRUCTOR, init with new keyword
 *	.Json(options) ~ CONSTRUCTOR, init with new keyword
 *
 * config <-- config.js file object
 * console
 * require
 * setTimeout
 * setInterval
 * 
 */

// Call the listen command
listen({
	// This is used to easily differetiate listeners
	handle: "HELLO_WORLD",
	// A regular expression goes here. See regexFactory in README
	regex: regexFactory.startsWith("HW"),
	// These are the in built help options
	command: {
		// Supply a root command
		root: "HW",
		// These are further options after your root command (eg. HW ADD)
		options: "ADD",
		// Help text returned from ;help HW
		help: "This command says HELLO WORLD :D"
	},
	// This is where the magic happens.
	callback: function (input) {
	/* 
	 * Note that you can place variables and functions outside of the
	 * listener for the while plugin to access. Where possible, put I/O
	 * methods outside of the plugin so that they only create one object
	 * or run once.
	 *
	 * As for the "input" parameter of the callback, this is what is
	 * available:
	 *		input.raw		--> The raw message
	 *		input.from 		--> Who the message is from
	 *		input.host 		--> Their hostmask
	 *		input.context	--> Origin of the message (ie. channel or query context)
	 *		input.data		--> The actual body of the message
	 * 		input.match		--> The match array returned from the listener's regex process
	 */
		irc.say(input.context, "HELLO WORLD");
	}
});